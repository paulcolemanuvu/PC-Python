import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm


def monte_carlo():

    sys = pd.read_csv('apple_historical.csv')  # Read .csv file generated by scraper.py
    sys['CLOSE'] = sys['CLOSE'].str.replace(',', '').str.replace('$', '').astype(float).round(2)  # Convert to float
    sys['DATE'] = pd.to_datetime(sys.DATE)  # Convert index DATE to datetime object
    sys = sys.set_index('DATE')

    # CALCULATING DRIFT
    daily_returns = sys['CLOSE'].pct_change()  # Calculating daily returns
    log_returns = np.log(1 + daily_returns)  # Calculating log returns from daily returns
    avg = log_returns.mean()  # Calculating average of log returns
    var = log_returns.var()  # Calculating the variance of those returns
    drift = avg - (var / 2.0)  # Calculating drift (drift is the direction, i.e. whether it'll go up or down)
    drift = np.array(drift)  # Convert drift to an array
    print("The calculated Drift is: ", drift.round(4))

    # CALCULATING RANDOM VARIABLE USING RANDOM WALK THEORY
    price_prediction_over_days = 60  # Number of days (forecasted price of stock for 'x' number of days)
    prediction_count = 10  # Range of predictions/walks (how many predictions are needed)
    std = log_returns.std()  # Calculating the standard deviation
    print("The calculated Standard Deviation is: ", std.round(2))
    std = np.array(std)  # Convert Standard Deviation to a numpy array
    x = np.random.rand(price_prediction_over_days, prediction_count)  # Generate a random multi-dim array

    # CALCULATING RANDOM VARIABLE (Rv)
    Rv = std * norm.ppf(x)  # Function norm.ppf() takes the inverse of the normal distribution, then multiplying by std.
    df = pd.DataFrame(Rv)  # Convert this newly calculated array to a Pandas dataframe
    df.to_csv("required_random_variable_array.csv", index=False)  # Save dataframe to .csv file

    # CALCULATING E VALUE
    e_value = np.exp(drift + Rv)  # Calculate E value; drift and Rv values are added, and then the exp() is evaluated.
    current_price = sys['CLOSE'].iloc[1]  # Selecting last price of the year.
    new_prices = np.zeros_like(e_value)  # Create an array to store the results
    new_prices[0] = current_price  # 1st row of array assigned current stock value; 10 generated price paths.

    for i in range(1, price_prediction_over_days):  # Loop over the number of days and predict the price for each one.
        new_prices[i] = new_prices[i - 1] * e_value[i]  # Calculating the future price with formula
    minimum = new_prices[price_prediction_over_days - 1].min()  # Fetch and assign minimum
    maximum = new_prices[price_prediction_over_days-1].max()  # Fetch and assign maximum

    df = pd.DataFrame(new_prices)  # Convert this newly calculated array to a Pandas dataframe
    df.to_csv("new_price_array.csv", index=False)  # Save dataframe to .csv file

    print("Over the next 60 days, the Minimum Predicted Price is: ", minimum)  # Display minimum prediction
    print("Over the next 60 days, the Maximum Predicted Price is: ", maximum)  # Display maximum prediction

    # PLOT MONTE CARLO AND DAILY RETURN KDE
    top = plt.subplot2grid((4, 4), (0, 0), rowspan=2, colspan=4)
    top.plot(new_prices)
    plt.xlabel('Days')
    plt.ylabel('Price')
    plt.title(label='Future Predictions - Monte Carlo Simulation\n\n10 Possible Price Paths\n')
    daily_return = sys['CLOSE'].pct_change()
    sys['Daily Return'] = daily_return
    plt.subplot2grid((4, 4), (3, 0), rowspan=4, colspan=4)
    plt.ylabel('Probability Density Value')
    sns.distplot(sys['Daily Return'].dropna(), bins=100, color='red')
    plt.gcf().set_size_inches(15, 11)

    # CHANGE THE DIRECTORY LOCATION BELOW TO WHERE YOU WANT TO SAVE THE PLOT
    plt.savefig('C:/Users/Paul/PycharmProjects/StockPrediction/monte_carlo_analysis.png')
    plt.show()

    return


# FUNCTION CALL
monte_carlo()


# Info on the Monte Carlo Simulation can be found here: https://www.investopedia.com/terms/m/montecarlosimulation.asp
# Info on the Random Walk Theory can be found here: https://www.investopedia.com/terms/r/randomwalktheory.asp